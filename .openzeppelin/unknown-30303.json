{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x5FD4e99DC1eFC12eBE5c5530d6C7b3860C819f9D",
      "txHash": "0x4fc44001ae946656e432feca56964ca319b3a71359172d94a4100d5b78559266",
      "kind": "uups"
    }
  ],
  "impls": {
    "9101e5e20fdbeab45a96e7987788e5291e981f20a3addc9f52b6cc99dc3640e2": {
      "address": "0x55155Ca1F57bbDB1e8e10EBB871c00D809E5E84f",
      "txHash": "0x9eb51f7ad9307f11a83317bd8a4dff8cb31eea2ec35e966ef00fe8dca15b3933",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "154",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "155",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "156",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "201",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "251",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "treasuryTax",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:15"
          },
          {
            "label": "coinbaseTax",
            "offset": 0,
            "slot": "302",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:16"
          },
          {
            "label": "zeroOffTax",
            "offset": 0,
            "slot": "303",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:17"
          },
          {
            "label": "burnAmount",
            "offset": 0,
            "slot": "304",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:19"
          },
          {
            "label": "minimumOffSupply",
            "offset": 0,
            "slot": "305",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:20"
          },
          {
            "label": "minerReward",
            "offset": 0,
            "slot": "306",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:22"
          },
          {
            "label": "treasuryReward",
            "offset": 0,
            "slot": "307",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:23"
          },
          {
            "label": "validatorReward",
            "offset": 0,
            "slot": "308",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:24"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "309",
            "type": "t_address_payable",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:26"
          },
          {
            "label": "mergeMiningTreasuryTax",
            "offset": 0,
            "slot": "310",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:29"
          },
          {
            "label": "mergeMiningCoinbaseBaseTax",
            "offset": 0,
            "slot": "311",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:30"
          },
          {
            "label": "mergeMiningMinerReward",
            "offset": 0,
            "slot": "312",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:32"
          },
          {
            "label": "mergeMiningTreasuryReward",
            "offset": 0,
            "slot": "313",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:33"
          },
          {
            "label": "mergeMiningValidatorReward",
            "offset": 0,
            "slot": "314",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:34"
          },
          {
            "label": "heliumForkTime",
            "offset": 0,
            "slot": "315",
            "type": "t_uint256",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:36"
          },
          {
            "label": "mergeMiningTimestamp",
            "offset": 0,
            "slot": "316",
            "type": "t_mapping(t_address,t_mapping(t_uint16,t_uint256))",
            "contract": "MiningRewardDistribution",
            "src": "contracts/MiningRewardDistribution.sol:38"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint16,t_uint256))": {
            "label": "mapping(address => mapping(uint16 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint16,t_uint256)": {
            "label": "mapping(uint16 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    }
  }
}
